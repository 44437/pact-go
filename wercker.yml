# The container definition we want to use for developing our app
box: golang

build:
  steps:
    - setup-go-workspace
    - golint:
        exclude: "vendor"
    - script:
        name: retrieve artifacts
        code: |
          mkdir -p output
          mkdir -p build
          if [ -d "$WERCKER_CACHE_DIR/build" ]; then cp -r $WERCKER_CACHE_DIR/build .; fi
          if [ -d "$WERCKER_CACHE_DIR/output" ]; then cp -r $WERCKER_CACHE_DIR/output .; fi
          echo "listing build:"
          ls -larth build
          echo "listing output:"
          ls -larth output
    - script:
        name: build
        code: |
          make bin
    - script:
        name: test
        code: |
          make test
    - script:
        name: Publish Coveralls
        code: goveralls -service="wercker.com" -coverprofile=profile.cov -repotoken $COVERALLS_TOKEN
    - script:
        name: publish artifacts
        code: |
          if [ -d "$WERCKER_CACHE_DIR/build" ]; then rm -rf $WERCKER_CACHE_DIR/build; fi
          if [ -d "$WERCKER_CACHE_DIR/output" ]; then rm -rf $WERCKER_CACHE_DIR/output; fi
          cp -r build $WERCKER_CACHE_DIR/build
          cp -r output $WERCKER_CACHE_DIR/output
          ls -larth $WERCKER_CACHE_DIR/build
          ls -larth $WERCKER_CACHE_DIR/output

package:
  box: ruby:2.2
  steps:
    - script:
        name: retrieve artifacts
        code: |
          if [ -d "$WERCKER_CACHE_DIR/build" ]; then cp -r $WERCKER_CACHE_DIR/build .; ls -larth build; fi
          if [ -d "$WERCKER_CACHE_DIR/output" ]; then cp -r $WERCKER_CACHE_DIR/output .; ls -larth output; fi
          echo "listing build:"
          ls -larth build
          echo "listing output:"
          ls -larth output
    - script:
        name: package
        code: |
          apt-get update && apt-get install -y unzip zip wget
          make package
    - script:
        name: publish artifacts
        code: |
          if [ -d "$WERCKER_CACHE_DIR/build" ]; then rm -rf $WERCKER_CACHE_DIR/build; fi
          if [ -d "$WERCKER_CACHE_DIR/output" ]; then rm -rf $WERCKER_CACHE_DIR/output; fi
          if [ -d "$WERCKER_CACHE_DIR/dist" ]; then rm -rf $WERCKER_CACHE_DIR/dist; fi
          cp -r build $WERCKER_CACHE_DIR/build
          cp -r output $WERCKER_CACHE_DIR/output
          cp -r dist $WERCKER_CACHE_DIR/dist
          echo "listing build:"
          ls -larth build
          echo "listing output:"
          ls -larth output
          echo "listing dist:"
          ls -larth dist

integration:
  steps:
    - setup-go-workspace
    - golint:
        exclude: "vendor"
    - script:
        name: retrieve artifacts
        code: |
          mkdir -p output
          mkdir -p build
          mkdir -p dist
          if [ -d "$WERCKER_CACHE_DIR/build" ]; then cp -r $WERCKER_CACHE_DIR/build .; fi
          if [ -d "$WERCKER_CACHE_DIR/output" ]; then cp -r $WERCKER_CACHE_DIR/output .; fi
          if [ -d "$WERCKER_CACHE_DIR/dist" ]; then cp -r $WERCKER_CACHE_DIR/dist .; fi
          echo "listing build:"
          ls -larth build
          echo "listing output:"
          ls -larth output
          echo "listing dist:"
          ls -larth dist
    - script:
        name: pact
        code: |
          ./scripts/pact.sh

# TODO: Get tokens for Pact foundation
deploy:
    steps:
        - tcnksm/ghr:
            token: $GITHUB_TOKEN
            version: $RELEASE_VERSION
            input: dist
            replace: $RELEASE_IS_DRAFT
            pre-release: $RELEASE_IS_DRAFT
